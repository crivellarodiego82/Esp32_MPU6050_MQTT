#Crivellaro 2021

#File IDE Arduino

#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <WiFi.h>

#include <PubSubClient.h>

Adafruit_MPU6050 mpu;


// WiFi
const char* ssid = "Rete_Wifi";                 // SSID
const char* wifi_password = "Password"; // Password Rete Wifi

// MQTT
const char* mqtt_server = "10.0.2.43";  // IP of the MQTT broker
const char* X_topic = "Mpu/X";
const char* Y_topic = "Mpu/Y";
const char* Z_topic = "Mpu/Z";
const char* Temp_topic = "Mpu/Temp";


//const char* mqtt_username = "nome"; // MQTT utente
//const char* mqtt_password = "password"; // MQTT password
const char* clientID = "MpuEsp32"; // MQTT Identificativo

WiFiClient wifiClient;
PubSubClient client(mqtt_server, 1883, wifiClient); 


void connect_MQTT(){
  Serial.print("Connesso a: ");
  Serial.println(ssid);

  WiFi.begin(ssid, wifi_password);

   while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

Serial.println("WiFi connesso");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

   if (client.connect(clientID)) {
    Serial.println("Connesso a MQTT");
  }
  else {
    Serial.println("Connessione a MQTT fallita...");
  }
}

void setup(void) {
  Serial.begin(115200);

  connect_MQTT();
  Serial.setTimeout(2000);

  while (!Serial)
    delay(10);

  Serial.println("MPU6050");

  if (!mpu.begin()) {
    Serial.println("Modulo MPU6050 mancante");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Modulo acquisito");

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);
}

void loop() {
 
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

 float X = a.acceleration.x;
 float Y = a.acceleration.y;
 float Z = a.acceleration.z;
 float Temp = temp.temperature;

 

  Serial.print("Acceleration X: ");
  Serial.print(a.acceleration.x);

  client.publish(X_topic, String(X).c_str(), true);
  delay(1000);
  
  Serial.print(", Y: ");
  Serial.print(a.acceleration.y);
  client.publish(Y_topic, String(Y).c_str(), true);
  delay(1000);
  
  Serial.print(", Z: ");
  Serial.print(a.acceleration.z);
  client.publish(Z_topic, String(Z).c_str(), true);
  delay(1000);
  
/*

  Serial.print("Rotation X: ");
  Serial.print(g.gyro.x);
  Serial.print(", Y: ");
  Serial.print(g.gyro.y);
  Serial.print(", Z: ");
  Serial.print(g.gyro.z);
  Serial.println(" rad/s");
 
*/

  Serial.print(", Temperature: ");
  Serial.print(temp.temperature);
  Serial.println(" degC");
  client.publish(Temp_topic, String(Temp).c_str(), true);
  delay(1000);

  Serial.println("");
  delay(1000);
}
